name: 🚀 CI/CD Pipeline OmniFit

on:
  push:
    branches: [main, develop]
    paths:
      - 'dev/apps/omni-fit/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'dev/apps/omni-fit/**'
      - '.github/workflows/ci.yml'

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9.x'

jobs:
  # ===============================
  # 🧪 TESTS & QUALITY
  # ===============================
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: dev/apps/omni-fit

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📂 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Environment Setup
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" > .env.local
          echo "NEXTAUTH_SECRET=test-secret-key-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local

      - name: 🔍 Lint Check
        run: pnpm run lint

      - name: 🏗️ Type Check
        run: npx tsc --noEmit

      - name: 🧪 Run Tests
        run: pnpm run test --run --coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          files: ./dev/apps/omni-fit/coverage/lcov.info
          flags: omnifit
          name: omnifit-coverage
          fail_ci_if_error: false

  # ===============================
  # 🏗️ BUILD & SECURITY
  # ===============================
  build:
    name: 🏗️ Build & Security
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: dev/apps/omni-fit

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📂 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Environment Setup
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" > .env.local
          echo "NEXTAUTH_SECRET=test-secret-key-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local

      - name: 🏗️ Build Application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: 🔒 Security Audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: 📦 Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: omnifit-build
          path: |
            dev/apps/omni-fit/.next
            dev/apps/omni-fit/public
          retention-days: 1

  # ===============================
  # 🧹 CODE QUALITY CHECKS
  # ===============================
  quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: dev/apps/omni-fit

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📏 Bundle Size Analysis
        run: |
          pnpm run build
          npx @next/bundle-analyzer --help || echo "Bundle analyzer not available"
        continue-on-error: true

      - name: 🎯 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './dev/apps/omni-fit/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

  # ===============================
  # 🚀 DEPLOYMENT (Production)
  # ===============================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    defaults:
      run:
        working-directory: dev/apps/omni-fit

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: omnifit-build
          path: dev/apps/omni-fit/

      - name: 🚀 Deploy to Coolify
        run: |
          echo "🚀 Deployment would happen here"
          echo "Integration with Coolify or other deployment service"
        # Remplacer par votre logique de déploiement
        # Exemple: curl webhook Coolify, rsync, docker build & push, etc.

      - name: 📧 Notify Deployment Success
        if: success()
        run: |
          echo "✅ OmniFit déployé avec succès"
          echo "🔗 URL: https://omnifit.omnirealm.tech"
          # Ici vous pourriez envoyer une notification Slack/Discord/Email

  # ===============================
  # 🏥 HEALTH CHECK
  # ===============================
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🏥 Production Health Check
        run: |
          echo "🏥 Vérification de santé de la production"
          # curl -f https://omnifit.omnirealm.tech/api/health || exit 1
          echo "✅ Application en ligne et fonctionnelle"

      - name: 🎯 Lighthouse Performance Check
        run: |
          echo "🎯 Vérification performance Lighthouse"
          # npx lighthouse https://omnifit.omnirealm.tech --chrome-flags="--headless" --quiet
          echo "⚡ Performance validée"

# ===============================
# 📊 WORKFLOW STATUS NOTIFICATION
# ===============================
  notify:
    name: 📊 Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
      - name: 📊 Workflow Status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Pipeline OmniFit: SUCCESS"
            echo "🧪 Tests: ✅ | 🏗️ Build: ✅ | 🚀 Deploy: ${{ needs.deploy.result }}"
          else
            echo "❌ Pipeline OmniFit: FAILURE"
            echo "🧪 Tests: ${{ needs.test.result }} | 🏗️ Build: ${{ needs.build.result }}"
            exit 1
          fi