#!/bin/bash

echo "üöÄ Test manuel Fitness Reminder PWA"
echo "======================================="

URL="https://frolicking-stardust-cd010f.netlify.app"
echo "üåê URL test√©e: $URL"

# Test 1: Accessibilit√© de base
echo ""
echo "üì± 1. Test d'accessibilit√© de base"
echo "-----------------------------------"

response=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
if [ "$response" = "200" ]; then
    echo "‚úÖ Page accessible (HTTP $response)"
else
    echo "‚ùå Page non accessible (HTTP $response)"
    exit 1
fi

# Test 2: Temps de r√©ponse
echo ""
echo "‚è±Ô∏è 2. Test du temps de r√©ponse"
echo "--------------------------------"

time_total=$(curl -s -o /dev/null -w "%{time_total}" "$URL")
time_ms=$(echo "$time_total * 1000" | bc -l)
echo "‚è±Ô∏è Temps de r√©ponse: ${time_ms%.*}ms"

if (( $(echo "$time_total < 3.0" | bc -l) )); then
    echo "‚úÖ Temps de r√©ponse acceptable (<3s)"
else
    echo "‚ö†Ô∏è Temps de r√©ponse lent (>3s)"
fi

# Test 3: Contenu HTML de base
echo ""
echo "üîç 3. Test du contenu HTML"
echo "---------------------------"

html_content=$(curl -s "$URL")

# V√©rifications basiques
if echo "$html_content" | grep -q "<!DOCTYPE html>"; then
    echo "‚úÖ Document HTML5 valide"
else
    echo "‚ùå Pas de DOCTYPE HTML5"
fi

if echo "$html_content" | grep -q "<title>"; then
    title=$(echo "$html_content" | grep -o '<title[^>]*>[^<]*</title>' | sed 's/<[^>]*>//g')
    echo "‚úÖ Titre trouv√©: $title"
else
    echo "‚ùå Pas de titre"
fi

if echo "$html_content" | grep -q "viewport"; then
    echo "‚úÖ Meta viewport pr√©sent (responsive)"
else
    echo "‚ùå Pas de meta viewport"
fi

# Test 4: Manifest PWA
echo ""
echo "üì± 4. Test du manifest PWA"
echo "---------------------------"

manifest_response=$(curl -s -o /dev/null -w "%{http_code}" "$URL/manifest.json")
if [ "$manifest_response" = "200" ]; then
    echo "‚úÖ Manifest PWA accessible"
    
    # T√©l√©charger et analyser le manifest
    manifest_content=$(curl -s "$URL/manifest.json")
    echo "üìÑ Contenu du manifest:"
    echo "$manifest_content" | python3 -m json.tool 2>/dev/null || echo "$manifest_content"
else
    echo "‚ùå Manifest PWA non accessible (HTTP $manifest_response)"
fi

# Test 5: Service Worker
echo ""
echo "‚öôÔ∏è 5. Test du Service Worker"
echo "-----------------------------"

if echo "$html_content" | grep -q "serviceWorker"; then
    echo "‚úÖ Service Worker d√©tect√© dans le HTML"
else
    echo "‚ö†Ô∏è Pas de r√©f√©rence Service Worker dans le HTML"
fi

sw_response=$(curl -s -o /dev/null -w "%{http_code}" "$URL/sw.js")
if [ "$sw_response" = "200" ]; then
    echo "‚úÖ Service Worker accessible (/sw.js)"
elif [ "$(curl -s -o /dev/null -w "%{http_code}" "$URL/service-worker.js")" = "200" ]; then
    echo "‚úÖ Service Worker accessible (/service-worker.js)"
else
    echo "‚ö†Ô∏è Service Worker non trouv√©"
fi

# Test 6: Ressources essentielles
echo ""
echo "üì¶ 6. Test des ressources essentielles"
echo "---------------------------------------"

# V√©rifier quelques ressources communes
resources=(
    "/favicon.ico"
    "/robots.txt"
    "/icon-192x192.png"
    "/icon-512x512.png"
)

for resource in "${resources[@]}"; do
    status=$(curl -s -o /dev/null -w "%{http_code}" "$URL$resource")
    if [ "$status" = "200" ]; then
        echo "‚úÖ $resource trouv√©"
    else
        echo "‚ö†Ô∏è $resource non trouv√© (HTTP $status)"
    fi
done

# Test 7: Analyse du contenu
echo ""
echo "üîç 7. Analyse du contenu de l'application"
echo "------------------------------------------"

# Rechercher des mots-cl√©s li√©s au fitness
keywords=("fitness" "exercice" "burpees" "pompes" "squats" "workout" "stats" "dashboard")

echo "üîç Mots-cl√©s fitness d√©tect√©s:"
for keyword in "${keywords[@]}"; do
    if echo "$html_content" | grep -qi "$keyword"; then
        echo "‚úÖ '$keyword' trouv√©"
    else
        echo "‚ö†Ô∏è '$keyword' non trouv√©"
    fi
done

# Test 8: Headers de s√©curit√©
echo ""
echo "üîê 8. Test des headers de s√©curit√©"
echo "-----------------------------------"

headers=$(curl -s -I "$URL")

security_headers=(
    "Content-Security-Policy"
    "X-Frame-Options"
    "X-Content-Type-Options"
    "Referrer-Policy"
)

for header in "${security_headers[@]}"; do
    if echo "$headers" | grep -qi "$header"; then
        echo "‚úÖ $header pr√©sent"
    else
        echo "‚ö†Ô∏è $header manquant"
    fi
done

echo ""
echo "======================================="
echo "‚úÖ Tests termin√©s"
echo "======================================="