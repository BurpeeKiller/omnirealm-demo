# =========================================
# OMNISCAN BACKEND - MAKEFILE
# =========================================
# Commandes pour g√©rer le backend OmniScan

.PHONY: help install dev test lint format clean validate-env setup-env build docker

# Variables
PYTHON := python3
PIP := pip3
VENV := venv
SOURCE := . $(VENV)/bin/activate

# Couleurs pour les messages
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BLUE := \033[34m
RESET := \033[0m

# Aide par d√©faut
help: ## Afficher cette aide
	@echo "$(BLUE)üöÄ OMNISCAN BACKEND - COMMANDES DISPONIBLES$(RESET)"
	@echo "$(BLUE)================================================$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(RESET) %s\\n", $$1, $$2}'

# Installation et configuration
install: ## Installer les d√©pendances
	@echo "$(YELLOW)üì¶ Installation des d√©pendances...$(RESET)"
	$(PYTHON) -m venv $(VENV)
	$(SOURCE) && $(PIP) install --upgrade pip
	$(SOURCE) && $(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ Installation termin√©e$(RESET)"

setup-env: ## Configurer l'environnement (.env)
	@echo "$(YELLOW)üîß Configuration de l'environnement...$(RESET)"
	$(SOURCE) && $(PYTHON) scripts/setup_env.py

validate-env: ## Valider la configuration environnement
	@echo "$(YELLOW)üîç Validation de la configuration...$(RESET)"
	$(SOURCE) && $(PYTHON) scripts/validate_env.py

# D√©veloppement
dev: validate-env ## Lancer le serveur de d√©veloppement
	@echo "$(YELLOW)üöÄ D√©marrage du serveur de d√©veloppement...$(RESET)"
	$(SOURCE) && uvicorn app.main:app --reload --host 0.0.0.0 --port 8001

dev-docker: ## Lancer via Docker Compose
	@echo "$(YELLOW)üê≥ D√©marrage avec Docker...$(RESET)"
	docker-compose up --build

# Tests et qualit√©
test: ## Lancer les tests
	@echo "$(YELLOW)üß™ Ex√©cution des tests...$(RESET)"
	$(SOURCE) && python -m pytest tests/ -v --cov=app --cov-report=html --cov-report=term

test-unit: ## Lancer uniquement les tests unitaires
	@echo "$(YELLOW)üß™ Tests unitaires...$(RESET)"
	$(SOURCE) && python -m pytest tests/unit/ -v

test-integration: ## Lancer les tests d'int√©gration
	@echo "$(YELLOW)üß™ Tests d'int√©gration...$(RESET)"
	$(SOURCE) && python -m pytest tests/integration/ -v

test-watch: ## Lancer les tests en mode watch
	@echo "$(YELLOW)üëÄ Tests en mode surveillance...$(RESET)"
	$(SOURCE) && python -m pytest tests/ --watch

lint: ## V√©rifier le code avec ruff
	@echo "$(YELLOW)üîç Analyse du code...$(RESET)"
	$(SOURCE) && ruff check app/ tests/ --fix

lint-check: ## V√©rifier le code sans correction
	@echo "$(YELLOW)üîç V√©rification du code...$(RESET)"
	$(SOURCE) && ruff check app/ tests/

format: ## Formater le code avec black
	@echo "$(YELLOW)‚ú® Formatage du code...$(RESET)"
	$(SOURCE) && black app/ tests/ scripts/

format-check: ## V√©rifier le formatage sans modification
	@echo "$(YELLOW)‚ú® V√©rification du formatage...$(RESET)"
	$(SOURCE) && black --check app/ tests/ scripts/

type-check: ## V√©rifier les types avec mypy
	@echo "$(YELLOW)üéØ V√©rification des types...$(RESET)"
	$(SOURCE) && mypy app/ || true

quality: format lint type-check test ## V√©rification compl√®te de la qualit√©
	@echo "$(GREEN)‚úÖ V√©rifications qualit√© termin√©es$(RESET)"

# Base de donn√©es
db-migrate: ## Appliquer les migrations (Supabase)
	@echo "$(YELLOW)üóÉÔ∏è  Application des migrations...$(RESET)"
	supabase db push

db-reset: ## R√©initialiser la base de donn√©es
	@echo "$(YELLOW)üóÉÔ∏è  R√©initialisation de la base...$(RESET)"
	supabase db reset

db-types: ## G√©n√©rer les types TypeScript depuis la DB
	@echo "$(YELLOW)üìù G√©n√©ration des types...$(RESET)"
	supabase gen types typescript --local > ../frontend/src/types/database.ts

# Nettoyage
clean: ## Nettoyer les fichiers temporaires
	@echo "$(YELLOW)üßπ Nettoyage...$(RESET)"
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	rm -rf uploads/*.pdf uploads/*.jpg uploads/*.png
	rm -rf temp/*
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(RESET)"

clean-all: clean ## Nettoyage complet (inclut venv)
	@echo "$(YELLOW)üßπ Nettoyage complet...$(RESET)"
	rm -rf $(VENV)/
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(RESET)"

# Build et d√©ploiement
build: quality ## Build pour la production
	@echo "$(YELLOW)üèóÔ∏è  Build de production...$(RESET)"
	$(SOURCE) && $(PIP) freeze > requirements-prod.txt
	@echo "$(GREEN)‚úÖ Build termin√©$(RESET)"

docker-build: ## Build de l'image Docker
	@echo "$(YELLOW)üê≥ Build de l'image Docker...$(RESET)"
	docker build -t omniscan-backend .

docker-run: ## Lancer le container Docker
	@echo "$(YELLOW)üê≥ D√©marrage du container...$(RESET)"
	docker run -p 8000:8000 --env-file .env omniscan-backend

# Outils de d√©veloppement
shell: ## Ouvrir un shell Python avec l'app charg√©e
	@echo "$(YELLOW)üêç Shell Python interactif...$(RESET)"
	$(SOURCE) && python -c "from app.main import app; from app.core.config import settings; print('OmniScan shell ready!'); import IPython; IPython.start_ipython(argv=[])"

logs: ## Voir les logs de l'application
	@echo "$(YELLOW)üìã Logs de l'application...$(RESET)"
	tail -f logs/omniscan.log 2>/dev/null || echo "Aucun fichier de log trouv√©"

# Tests de Protection des Revenus üõ°Ô∏è
test-revenue: ## Lancer tous les tests de protection des revenus
	@echo "$(RED)üõ°Ô∏è  Tests de protection des revenus...$(RESET)"
	./run-revenue-tests.sh

test-revenue-quick: ## Tests critiques de revenus (< 2min)
	@echo "$(RED)‚ö° Tests critiques de revenus...$(RESET)"
	./run-revenue-tests.sh --quick

test-revenue-critical: ## Tous les tests critiques de revenus
	@echo "$(RED)üö® Tests critiques complets...$(RESET)"
	./run-revenue-tests.sh --critical

test-quotas: ## Test protection quotas utilisateurs (CRITIQUE)
	@echo "$(RED)üí∞ Tests protection quotas...$(RESET)"
	$(SOURCE) && pytest tests/business/test_quota_protection.py -v

test-stripe: ## Test int√©gration Stripe (CRITIQUE)
	@echo "$(RED)üí≥ Tests Stripe...$(RESET)"
	$(SOURCE) && pytest tests/business/test_stripe_integration.py -v

test-auth-security: ## Test s√©curit√© authentification (CRITIQUE)
	@echo "$(RED)üîê Tests s√©curit√© auth...$(RESET)"
	$(SOURCE) && pytest tests/business/test_auth_security.py -v

test-injections: ## Test protection injections (CRITIQUE)
	@echo "$(RED)üóÉÔ∏è  Tests protection injections...$(RESET)"
	$(SOURCE) && pytest tests/security/test_injection_attacks.py -v

test-performance: ## Tests de performance et charge
	@echo "$(YELLOW)‚ö° Tests de performance...$(RESET)"
	$(SOURCE) && pytest tests/performance/ -v

setup-revenue-tests: ## Configurer environnement tests de revenus
	@echo "$(BLUE)üîß Configuration tests de revenus...$(RESET)"
	./setup-test-env.sh

# Production readiness
production-check: ## V√©rifier la pr√©paration pour production
	@echo "$(RED)üöÄ V√©rification production...$(RESET)"
	./run-revenue-tests.sh --critical || (echo "$(RED)‚ùå PAS PR√äT POUR PRODUCTION$(RESET)" && exit 1)
	@echo "$(GREEN)‚úÖ Pr√™t pour production!$(RESET)"

emergency-revenue-check: ## V√©rification urgente protection revenus
	@echo "$(RED)üö® V√âRIFICATION URGENTE REVENUS$(RESET)"
	$(SOURCE) && pytest tests/business/test_quota_protection.py::TestQuotaProtection::test_free_user_over_quota_blocked -v
	$(SOURCE) && pytest tests/business/test_quota_protection.py::TestQuotaProtection::test_pro_user_unlimited_access -v
	$(SOURCE) && pytest tests/business/test_stripe_integration.py::TestStripeWebhookSecurity::test_webhook_without_signature_rejected -v

# S√©curit√©
security-check: ## V√©rifier les vuln√©rabilit√©s
	@echo "$(YELLOW)üîí Analyse de s√©curit√©...$(RESET)"
	$(SOURCE) && safety check
	$(SOURCE) && bandit -r app/

security-scan: ## Scan s√©curit√© complet (Safety + Bandit + Semgrep)
	@echo "$(RED)üîç Scan s√©curit√© complet...$(RESET)"
	./security-scan.sh

# M√©triques et monitoring
metrics: ## Afficher les m√©triques du code
	@echo "$(YELLOW)üìä M√©triques du code...$(RESET)"
	$(SOURCE) && radon cc app/ -a
	$(SOURCE) && radon mi app/

coverage: ## G√©n√©rer le rapport de couverture
	@echo "$(YELLOW)üìä Rapport de couverture...$(RESET)"
	$(SOURCE) && python -m pytest tests/ --cov=app --cov-report=html
	@echo "$(BLUE)üìÑ Rapport HTML g√©n√©r√© dans htmlcov/index.html$(RESET)"

# Utilitaires
reload: ## Red√©marrer le serveur de d√©veloppement
	@echo "$(YELLOW)üîÑ Red√©marrage...$(RESET)"
	pkill -f "uvicorn app.main:app" || true
	make dev

status: validate-env ## Afficher le statut du syst√®me
	@echo "$(BLUE)üìä STATUT OMNISCAN BACKEND$(RESET)"
	@echo "$(BLUE)========================$(RESET)"
	@echo "Environment: $$(grep ENVIRONMENT .env 2>/dev/null | cut -d'=' -f2 || echo 'Non configur√©')"
	@echo "Python: $$(python3 --version)"
	@echo "Dossier: $$(pwd)"
	@echo "Virtual env: $$([ -d $(VENV) ] && echo 'Install√©' || echo 'Non install√©')"
	@echo "Port 8000: $$(lsof -ti:8000 && echo 'Utilis√©' || echo 'Libre')"

# Commandes par d√©faut
.DEFAULT_GOAL := help