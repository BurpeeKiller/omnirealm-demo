#!/usr/bin/env python3
"""
Test simple d'OCR pour v√©rifier que le moteur l√©ger peut fonctionner
sans toutes les d√©pendances
"""

import asyncio
import time
import os
import sys
from pathlib import Path
from typing import Dict, Any
import tempfile

# Test basique sans imports lourds
def create_simple_test_image():
    """Cr√©er une image de test simple sans d√©pendances lourdes"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        # Image test simple
        img = Image.new('RGB', (400, 200), color='white')
        draw = ImageDraw.Draw(img)
        
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        text = "Test OCR Simple\nOmniScan Performance\n49‚Ç¨/mois Premium"
        draw.multiline_text((20, 50), text, fill='black', font=font, spacing=10)
        
        # Sauvegarder dans temp
        temp_path = Path(tempfile.gettempdir()) / "omniscan_test.png"
        img.save(temp_path)
        
        return temp_path
    except ImportError as e:
        print(f"PIL non disponible: {e}")
        return None


def test_tesseract_basic():
    """Test basique avec Tesseract"""
    try:
        import pytesseract
        from PIL import Image
        
        # Cr√©er image test
        test_path = create_simple_test_image()
        if not test_path:
            print("‚ùå Impossible de cr√©er image de test")
            return False
        
        # Test OCR
        start_time = time.time()
        image = Image.open(test_path)
        text = pytesseract.image_to_string(image, lang='fra+eng')
        processing_time = time.time() - start_time
        
        # Nettoyer
        test_path.unlink()
        
        print(f"‚úÖ Tesseract - Temps: {processing_time:.2f}s")
        print(f"   Texte extrait: '{text.strip()[:100]}'")
        
        return len(text.strip()) > 10
        
    except ImportError as e:
        print(f"‚ùå Tesseract non disponible: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur Tesseract: {e}")
        return False


def test_system_resources():
    """Tester les ressources syst√®me disponibles"""
    try:
        import psutil
        
        cpu_count = psutil.cpu_count()
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('.')
        
        print("\nüñ•Ô∏è Ressources Syst√®me:")
        print(f"   CPU: {cpu_count} cores")
        print(f"   RAM Total: {memory.total / 1024**3:.1f} GB")
        print(f"   RAM Libre: {memory.available / 1024**3:.1f} GB")
        print(f"   Disque Libre: {disk.free / 1024**3:.1f} GB")
        
        # Analyser si suffisant pour OCR l√©ger
        ram_gb = memory.available / 1024**3
        
        if ram_gb < 0.5:
            print("   ‚ö†Ô∏è RAM limit√©e - recommand√©: Tesseract uniquement")
            return "tesseract_only"
        elif ram_gb < 1.0:
            print("   ‚úÖ RAM suffisante - recommand√©: OCR l√©ger avec EasyOCR")
            return "lightweight_basic"
        else:
            print("   ‚úÖ RAM confortable - recommand√©: OCR l√©ger complet")
            return "lightweight_full"
            
    except ImportError:
        print("‚ùå psutil non disponible")
        return "unknown"


def estimate_ocr_performance():
    """Estimer les performances possibles sur ce syst√®me"""
    print("\nüìä Estimation Performances OCR:")
    
    # Test Tesseract
    tesseract_works = test_tesseract_basic()
    
    # Analyser ressources
    recommendation = test_system_resources()
    
    # Recommandations
    print(f"\nüéØ Recommandation:")
    
    if not tesseract_works:
        print("   ‚ùå Configuration minimale insuffisante")
        print("   ‚Üí Installer: apt-get install tesseract-ocr tesseract-ocr-fra")
        return False
    
    if recommendation == "tesseract_only":
        print("   üìã Configuration: Tesseract uniquement")
        print("   ‚Üí Performance attendue: 2-5s par page, qualit√© de base")
        print("   ‚Üí Recommandation: Upgrade RAM pour moteur l√©ger")
        
    elif recommendation in ["lightweight_basic", "lightweight_full"]:
        print("   üöÄ Configuration: Moteur OCR l√©ger recommand√©")
        print("   ‚Üí Performance attendue: 1-3s par page, qualit√© premium") 
        print("   ‚Üí Justification 49‚Ç¨/mois: Qualit√© sup√©rieure + vitesse")
        
        if recommendation == "lightweight_full":
            print("   ‚Üí Support EasyOCR + PaddleOCR disponible")
        else:
            print("   ‚Üí EasyOCR recommand√© (plus l√©ger que PaddleOCR)")
    
    return True


def generate_deployment_config():
    """G√©n√©rer configuration de d√©ploiement optimis√©e"""
    recommendation = test_system_resources()
    
    config = {
        "ENABLE_LIGHTWEIGHT_OCR": "true" if recommendation != "tesseract_only" else "false",
        "ENABLE_EASY_OCR": "true" if recommendation in ["lightweight_basic", "lightweight_full"] else "false",
        "ENABLE_PADDLE_OCR": "true" if recommendation == "lightweight_full" else "false",
        "OCR_MEMORY_LIMIT_MB": "256" if recommendation == "tesseract_only" else "512",
        "OCR_CPU_THREADS": "2",
        "OCR_BATCH_SIZE": "1"
    }
    
    print(f"\n‚öôÔ∏è Configuration Environnement Recommand√©e:")
    for key, value in config.items():
        print(f"   {key}={value}")
    
    # Sauvegarder config
    config_path = Path("./temp/ocr_config.env")
    config_path.parent.mkdir(exist_ok=True)
    
    with open(config_path, 'w') as f:
        f.write("# Configuration OCR optimis√©e pour ce VPS\n")
        f.write(f"# G√©n√©r√©e le {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        for key, value in config.items():
            f.write(f"{key}={value}\n")
    
    print(f"   üìÅ Config sauv√©e: {config_path}")
    
    return config


def main():
    """Test principal"""
    print("üöÄ Test Simple OCR - OmniScan VPS")
    print("=" * 50)
    
    # Tests de base
    success = estimate_ocr_performance()
    
    if success:
        # G√©n√©rer configuration
        config = generate_deployment_config()
        
        print(f"\n‚úÖ Tests termin√©s avec succ√®s!")
        print(f"üí° Prochaine √©tape: D√©ployer avec la configuration recommand√©e")
        
        return True
    else:
        print(f"\n‚ùå Configuration insuffisante")
        print(f"üîß Corriger la configuration syst√®me avant d√©ploiement")
        
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)