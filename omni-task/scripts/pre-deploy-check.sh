#!/bin/bash

# Script de validation pr√©-d√©ploiement pour OmniTask

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Validation pr√©-d√©ploiement OmniTask v3.0.0${NC}\n"

ERRORS=0

# 1. V√©rification TypeScript
echo -e "${YELLOW}1Ô∏è‚É£ V√©rification TypeScript...${NC}"
if pnpm run type-check > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ TypeScript OK${NC}\n"
else
    echo -e "${RED}‚ùå Erreurs TypeScript d√©tect√©es${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 2. V√©rification ESLint
echo -e "${YELLOW}2Ô∏è‚É£ V√©rification ESLint...${NC}"
if pnpm run lint > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ ESLint OK${NC}\n"
else
    echo -e "${RED}‚ùå Erreurs ESLint d√©tect√©es${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 3. Tests unitaires
echo -e "${YELLOW}3Ô∏è‚É£ Ex√©cution des tests...${NC}"
if pnpm run test --run > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Tests pass√©s${NC}\n"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Certains tests √©chouent${NC}\n"
fi

# 4. Test de build
echo -e "${YELLOW}4Ô∏è‚É£ Test de build production...${NC}"
if pnpm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}\n"
    
    # V√©rifier la taille du build
    if [ -d ".next" ]; then
        BUILD_SIZE=$(du -sh .next | cut -f1)
        echo -e "${BLUE}   üì¶ Taille du build : ${BUILD_SIZE}${NC}\n"
    fi
else
    echo -e "${RED}‚ùå √âchec du build${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 5. V√©rification des fichiers critiques
echo -e "${YELLOW}5Ô∏è‚É£ V√©rification des fichiers de d√©ploiement...${NC}"
REQUIRED_FILES=(
    "Dockerfile"
    "next.config.mjs"
    ".env.production.example"
    "package.json"
    "pnpm-lock.yaml"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        echo -e "   ${GREEN}‚úì${NC} $file"
    else
        echo -e "   ${RED}‚úó${NC} $file manquant"
        ERRORS=$((ERRORS + 1))
    fi
done
echo ""

# 6. V√©rification du mode standalone
echo -e "${YELLOW}6Ô∏è‚É£ V√©rification de la configuration Next.js...${NC}"
if grep -q "output: 'standalone'" next.config.mjs; then
    echo -e "${GREEN}‚úÖ Mode standalone activ√©${NC}\n"
else
    echo -e "${RED}‚ùå Mode standalone non configur√©${NC}"
    ERRORS=$((ERRORS + 1))
fi

# 7. V√©rification des variables d'environnement
echo -e "${YELLOW}7Ô∏è‚É£ V√©rification des variables d'environnement...${NC}"
if [ -f ".env.local" ]; then
    echo -e "${GREEN}‚úÖ Fichier .env.local pr√©sent${NC}"
    
    # V√©rifier les variables critiques
    REQUIRED_VARS=(
        "NEXT_PUBLIC_SUPABASE_URL"
        "NEXT_PUBLIC_SUPABASE_ANON_KEY"
        "SUPABASE_SERVICE_ROLE_KEY"
    )
    
    MISSING_VARS=0
    for var in "${REQUIRED_VARS[@]}"; do
        if grep -q "^$var=" .env.local; then
            echo -e "   ${GREEN}‚úì${NC} $var"
        else
            echo -e "   ${YELLOW}‚ö†${NC} $var (√† configurer dans Coolify)"
            MISSING_VARS=$((MISSING_VARS + 1))
        fi
    done
    
    if [ $MISSING_VARS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $MISSING_VARS variables √† configurer dans Coolify${NC}\n"
    else
        echo -e "${GREEN}‚úÖ Toutes les variables sont configur√©es${NC}\n"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pas de fichier .env.local (les variables seront configur√©es dans Coolify)${NC}\n"
fi

# 8. V√©rification de la sant√© de l'API
echo -e "${YELLOW}8Ô∏è‚É£ V√©rification de la route health check...${NC}"
if [ -f "app/api/health/route.ts" ]; then
    echo -e "${GREEN}‚úÖ Route /api/health pr√©sente${NC}\n"
else
    echo -e "${RED}‚ùå Route /api/health manquante${NC}"
    ERRORS=$((ERRORS + 1))
fi

# R√©sum√© final
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ Toutes les v√©rifications critiques sont pass√©es !${NC}"
    echo -e "${GREEN}üì¶ L'application est pr√™te pour le d√©ploiement${NC}\n"
    echo -e "${YELLOW}üí° Prochaines √©tapes :${NC}"
    echo -e "   1. Committez vos changements : ${BLUE}git add -A && git commit -m 'Ready for deployment'${NC}"
    echo -e "   2. Poussez sur GitHub : ${BLUE}git push origin main${NC}"
    echo -e "   3. Lancez le d√©ploiement dans Coolify"
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS erreur(s) critique(s) d√©tect√©e(s)${NC}"
    echo -e "${RED}üõë Corrigez les erreurs avant de d√©ployer${NC}"
    exit 1
fi